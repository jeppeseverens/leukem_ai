preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["optimized_ensemble_performance"]][["0"]][["overall"]]
optimized_matrix <- results$probability_matrices$svm$cv$`0`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["optimized_ensemble_performance"]][["0"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["0"]][["overall"]]
optimized_matrix <- results$probability_matrices$svm$cv$`1`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["optimized_ensemble_performance"]][["1"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["1"]][["overall"]]
optimized_matrix <- results$probability_matrices$svm$cv$`4`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["optimized_ensemble_performance"]][["4"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["4"]][["overall"]]
optimized_matrix <- results$probability_matrices$svm$cv$`4`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][["4"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["4"]][["overall"]]
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
optimized_matrix <- results$probability_matrices$svm$cv$`4`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][["4"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["4"]][["overall"]]
View(results)
optimized_matrix <- results$probability_matrices$svm$cv$`4`
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][["4"]][["overall"]]
results[["optimized_ensemble_performance"]][["4"]][["overall"]]
results[["global_optimized_ensemble_performance"]][["4"]][["overall"]]
fold <- "1"
optimized_matrix <- results$probability_matrices$svm$cv[[fold]]
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][[fold]][["overall"]]
results[["optimized_ensemble_performance"]][[fold]][["overall"]]
results[["global_optimized_ensemble_performance"]][[fold]][["overall"]]
fold <- "2"
optimized_matrix <- results$probability_matrices$svm$cv[[fold]]
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][[fold]][["overall"]]
results[["optimized_ensemble_performance"]][[fold]][["overall"]]
results[["global_optimized_ensemble_performance"]][[fold]][["overall"]]
fold <- "3"
optimized_matrix <- results$probability_matrices$svm$cv[[fold]]
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][[fold]][["overall"]]
results[["optimized_ensemble_performance"]][[fold]][["overall"]]
results[["global_optimized_ensemble_performance"]][[fold]][["overall"]]
fold <- "4"
optimized_matrix <- results$probability_matrices$svm$cv[[fold]]
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][[fold]][["overall"]]
results[["optimized_ensemble_performance"]][[fold]][["overall"]]
results[["global_optimized_ensemble_performance"]][[fold]][["overall"]]
fold <- "0"
optimized_matrix <- results$probability_matrices$svm$cv[[fold]]
# Extract true labels and remove from probability matrix
truth <- make.names(optimized_matrix$y)
prob_matrix <- optimized_matrix[, !colnames(optimized_matrix) %in% "y", drop = FALSE]
# Get predictions
preds <- colnames(prob_matrix)[apply(prob_matrix, 1, which.max)]
# Clean class labels
truth <- gsub("Class: ", "", truth)
preds <- gsub("Class: ", "", preds)
truth <- modify_classes(truth)
preds <- modify_classes(preds)
# Ensure all classes are represented
all_classes <- unique(c(truth, preds))
truth <- factor(truth, levels = all_classes)
preds <- factor(preds, levels = all_classes)
# Calculate confusion matrix and metrics
cm <- caret::confusionMatrix(preds, truth)
cm$overall
results[["ovr_ensemble_multiclass_performance"]][[fold]][["overall"]]
results[["optimized_ensemble_performance"]][[fold]][["overall"]]
results[["global_optimized_ensemble_performance"]][[fold]][["overall"]]
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
install.packages("glmnet")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
View(results)
results[["probability_matrices"]][["svm"]][["cv"]][["0"]]
View(results[["probability_matrices"]][["svm"]][["cv"]][["0"]])
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
View(results)
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
# Generate all combinations of weights from 0 to 1 in 0.1 steps
steps <- seq(0, 1, by = 0.1)
grid <- expand.grid(SVM = steps, XGB = steps, NN = steps)
# Filter combinations that sum to 1
valid_combinations <- subset(grid, abs(SVM + XGB + NN - 1) < 1e-6)
# Convert to a named list
ENSEMBLE_WEIGHTS <- apply(valid_combinations, 1, function(row) {
list(SVM = row["SVM"], XGB = row["XGB"], NN = row["NN"])
})
# Name the list elements for clarity (optional)
names(ENSEMBLE_WEIGHTS) <- paste0("W", seq_along(ENSEMBLE_WEIGHTS))
View(ENSEMBLE_WEIGHTS)
# Generate all combinations of weights from 0 to 1 in 0.1 steps
steps <- seq(0, 1, by = 0.1)
grid <- expand.grid(SVM = steps, XGB = steps, NN = steps)
# Filter combinations that sum to 1
valid_combinations <- subset(grid, abs(SVM + XGB + NN - 1) < 1e-6)
# Remove all-equal weights (except for 1/3,1/3,1/3)
is_all_equal <- with(valid_combinations, SVM == XGB & XGB == NN)
is_one_third <- with(valid_combinations, abs(SVM - 1/3) < 1e-6 & abs(XGB - 1/3) < 1e-6 & abs(NN - 1/3) < 1e-6)
keep_rows <- !is_all_equal | is_one_third
valid_combinations <- valid_combinations[keep_rows, ]
# Convert to a named list
ENSEMBLE_WEIGHTS <- apply(valid_combinations, 1, function(row) {
list(SVM = row["SVM"], XGB = row["XGB"], NN = row["NN"])
})
# Name the list elements for clarity (optional)
names(ENSEMBLE_WEIGHTS) <- paste0("W", seq_along(ENSEMBLE_WEIGHTS))
View(ENSEMBLE_WEIGHTS)
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
ENSEMBLE_WEIGHTS
ENSEMBLE_WEIGHTS = list("SVM" = 0.3, "XGB" = 0.3, "NN" = 0.3)
ENSEMBLE_WEIGHTS == list("SVM" = 0.3, "XGB" = 0.3, "NN" = 0.3)
# Generate all combinations of weights from 0 to 1 in 0.1 steps
steps <- seq(0, 1, by = 0.1)
grid <- expand.grid(SVM = steps, XGB = steps, NN = steps)
# Filter combinations that sum to 1
valid_combinations <- subset(grid, abs(SVM + XGB + NN - 1) < 0.1)
# Convert to a named list
ENSEMBLE_WEIGHTS <- apply(valid_combinations, 1, function(row) {
list(SVM = row["SVM"], XGB = row["XGB"], NN = row["NN"])
})
# Name the list elements for clarity (optional)
names(ENSEMBLE_WEIGHTS) <- paste0("W", seq_along(ENSEMBLE_WEIGHTS))
ENSEMBLE_WEIGHTS
View(ENSEMBLE_WEIGHTS)
ENSEMBLE_WEIGHTS[["ALL"]] <- list(SVM = 1, XGB = 1, NN = 1)
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
View(ENSEMBLE_WEIGHTS)
# Load the analysis script
#source("outer_cv_analysis.R")
library(dplyr)
library(stringr)
clean_probs_str <- function(probs_str) {
probs_str %>%
str_replace_all("\\[|\\]|\\{|\\}|\\\n|,", "") %>%  # remove brackets and line breaks
str_squish() %>%                                 # collapse multiple spaces
str_split(" ") %>%                               # split by space
unlist() %>%
as.numeric()
}
modify_classes <- function(vector){
vector[grepl("MDS|TP53", vector)] <- "MDS-r"
vector[!grepl("MLLT3", vector) & grepl("KMT2A", vector)] <- "other KMT2A"
vector
}
rgas_path <- "../data/rgas.csv"
y <- read.csv(rgas_path)$ICC_Subtype
studies_path <- "../data/meta.csv"
studies <- read.csv(studies_path)$Studies
atleast_10 <- names(which(table(y) >=10))
exclude <- c("AML NOS", "Missing data")
selected_studies <- c(
"TCGA-LAML",
"LEUCEGENE",
"BEATAML1.0-COHORT",
"AAML0531",
"AAML1031"
)
y <- y[y %in% atleast_10 & !y %in% exclude & studies %in% selected_studies]
class_mapping <- read.csv("~/Documents/AML_PhD/leukem_ai/label_mapping_df_n10.csv")
cms_from_standard <- function(results_df){
outer_folds <- unique(results_df$outer_fold)
cm_list <- list()
for (outer_fold in outer_folds){
results_df_fold <- results_df[results_df$outer_fold == outer_fold,]
test_indices <- clean_probs_str(results_df_fold$sample_indices[1]) + 1
n_samples <- length(test_indices)
prob_df_fold <- data.frame(t(matrix(clean_probs_str(results_df_fold$preds_prob), ncol = n_samples)))
y_test_fold <- y[test_indices]
classes <- clean_probs_str(results_df_fold$classes)
classes <- class_mapping$Label[classes+1]
colnames(prob_df_fold) <- classes
preds <- colnames(prob_df_fold)[apply(prob_df_fold, 1, which.max)]
y_mod <- modify_classes(y_test_fold)
preds_mod <- modify_classes(preds)
all_classes <- unique(c(y_mod,preds_mod))
y_mod <- factor(y_mod, levels = all_classes)
preds_mod <- factor(preds_mod, levels = all_classes)
cm_list[[as.character(outer_fold)]] <- caret::confusionMatrix(preds_mod, y_mod)
}
return(cm_list)
}
cms_from_ovr <- function(results_df){
outer_folds <- unique(results_df$outer_fold)
cm_list <- list()
for (outer_fold in outer_folds){
results_df_fold <- results_df[results_df$outer_fold == outer_fold,]
test_indices <- clean_probs_str(results_df_fold$sample_indices[1]) + 1
n_samples <- length(test_indices)
prob_df_fold <- data.frame(matrix(nrow = n_samples, ncol = 0))
y_test_fold <- y[test_indices]
classes <- unique(results_df_fold$class_label)
for (i in 1:nrow(results_df_fold)){
class <- results_df_fold$class_label[i]
prob_df_fold[class] <- clean_probs_str(results_df_fold$preds_prob[i])
}
preds <- colnames(prob_df_fold)[apply(prob_df_fold, 1, which.max)]
y_mod <- modify_classes(y_test_fold)
preds_mod <- modify_classes(preds)
all_classes <- unique(y_mod)
y_mod <- factor(y_mod, levels = all_classes)
preds_mod <- factor(preds_mod, levels = all_classes)
cm_list[[as.character(outer_fold)]] <- caret::confusionMatrix(preds_mod, y_mod)
}
return(cm_list)
}
cbind.fill<-function(...){
nm <- list(...)
nm<-lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
mean_overall <- function(cm_list, model, type){
kappas <- sapply(cm_list, function(x) x$overall["Kappa"])
mean_kappas <- mean(kappas)
sd_kappas <- sd(kappas)
acc <- sapply(cm_list, function(x) x$overall["Accuracy"])
mean_acc <- mean(acc)
sd_acc <- sd(acc)
return(data.frame(model, type, mean_kappas, sd_kappas, mean_acc, sd_acc))
}
mean_per_class <- function(cm_list, model, type){
byClass_Balanced.Accuracy <- do.call(cbind.fill,lapply(cm_list, function(x) data.frame(x$byClass)["Balanced.Accuracy"]))
classes <- rownames(byClass_Balanced.Accuracy)
mean_Balanced.Accuracy <- apply(byClass_Balanced.Accuracy, 1, mean, na.rm = TRUE)
sd_Balanced.Accuracy <- apply(byClass_Balanced.Accuracy, 1, sd, na.rm = TRUE)
byClass_F1 <- do.call(cbind.fill,lapply(cm_list, function(x) data.frame(x$byClass)["F1"]))
mean_F1 <- apply(byClass_F1, 1, mean, na.rm = TRUE)
sd_F1 <- apply(byClass_F1, 1, sd, na.rm = TRUE)
byClass_Sensitivity <- do.call(cbind.fill,lapply(cm_list, function(x) data.frame(x$byClass)["Sensitivity"]))
mean_Sensitivity <- apply(byClass_Sensitivity, 1, mean, na.rm = TRUE)
sd_Sensitivity <- apply(byClass_Sensitivity, 1, sd, na.rm = TRUE)
byClass_Specificity <- do.call(cbind.fill,lapply(cm_list, function(x) data.frame(x$byClass)["Specificity"]))
mean_Specificity <- apply(byClass_Specificity, 1, mean, na.rm = TRUE)
sd_Specificity <- apply(byClass_Specificity, 1, sd, na.rm = TRUE)
data.frame(model, type, "class" = classes, mean_Balanced.Accuracy, sd_Balanced.Accuracy, mean_F1, sd_F1, mean_Sensitivity, sd_Sensitivity, mean_Specificity, sd_Specificity)
}
expand_cm <- function(cm_table, all_levels) {
# Create a full zero matrix
full_cm <- matrix(0, nrow = length(all_levels), ncol = length(all_levels),
dimnames = list(Reference = all_levels, Prediction = all_levels))
# Fill in the known values
full_cm[rownames(cm_table), colnames(cm_table)] <- cm_table
return(full_cm)
}
combine_cms <- function(cms){
cms_only <- lapply(cms, function(x) x$table)
all_levels <- sort(unique(unlist(lapply(cms_only, function(x) union(rownames(x), colnames(x))))))
expanded_cms <- lapply(cms_only, expand_cm, all_levels = all_levels)
combined_cm <- Reduce(`+`, expanded_cms)
combined_cm
}
analyse <- function(file, model, type, method, y){
cat(sprintf("\nProcessing now: Model: %s  Type: %s  Method: %s\n", model, type, method))
results_df <- read.csv(file)
if (method == "ovr") {
cms <- cms_from_ovr(results_df)
} else if (method == "standard"){
cms <- cms_from_standard(results_df)
} else {
stop(paste0("for file ", file, " with ", model, " and ", type,", method does not match 'ovr' or 'standard'"))
}
means_df <- mean_overall(cms, model, type)
per_class_df <- mean_per_class(cms, model, type)
combined_cm <- combine_cms(cms)
out <- list(means_df, per_class_df, combined_cm)
return(out)
}
analyse_all <- function(to_analyse){
out <- lapply(to_analyse, function(x){
analyse(x[1], x[2], x[3], x[4], y)
})
overall <- do.call(plyr::rbind.fill, lapply(out, function(x) x[[1]]))
per_class <- do.call(plyr::rbind.fill, lapply(out, function(x) x[[2]]))
combined_cm <- lapply(out, function(x) x[[3]])
out <- list(overall, per_class, combined_cm)
names(out) <- c("overall", "per_class", "cms")
return(out)
}
to_analyse <- list(
c("../out/outer_cv/SVM_n10/SVM_outer_cv_CV_OvR_20250703_1254.csv", "SVM", "CV", "ovr"),
c("../out/outer_cv/SVM_n10/SVM_outer_cv_loso_OvR_20250703_1309.csv", "SVM", "LOSO", "ovr"),
c("../out/outer_cv/XGBOOST_n10/XGBOOST_outer_cv_CV_OvR_20250703_1259.csv", "XGBOOST", "CV", "ovr"),
c("../out/outer_cv/XGBOOST_n10/XGBOOST_outer_cv_loso_OvR_20250703_1312.csv", "XGBOOST", "LOSO", "ovr"),
c("../out/outer_cv/NN_n10/NN_outer_cv_CV_standard_20250731_1756.csv", "NN", "CV", "standard"),
c("../out/outer_cv/NN_n10/NN_outer_cv_loso_standard_20250731_1807.csv", "NN", "LOSO", "standard")
)
out <- analyse_all(to_analyse)
out$overall
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
setwd("~/Documents/AML_PhD/leukem_ai")
setwd("~/Documents/AML_PhD/leukem_ai")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
setwd("~/Documents/AML_PhD/leukem_ai")
source("R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/outer_cv_analysis.R")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
source("~/Documents/AML_PhD/leukem_ai/R/analyse_inner_cv_new.r")
