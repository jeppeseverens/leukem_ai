AEmism = ifelse(diffAE > 1, 1, 0)
) %>%
select(SUBJID, AESTDT, AERCD, diffAE, AEmism, AESER) %>%
# Merge with subject-level info
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")], by = "SUBJID") %>%
filter(!is.na(diffAE), FILTER_ITT == 1) %>%
mutate(type = "Self reported (diary)")
# --- Load and preprocess investigator-reported adverse events (AE) ---
AE <- read.csv(file.path(data_dir, "wideAE.csv")) %>%
mutate(
# Clean date fields
AESTDT = ifelse(AESTDT == "" | AESTDT == "-----", NA, AESTDT),
AERCD = ifelse(AERCD == "" | AERCD == "-----", NA, AERCD)
) %>%
mutate(
# Convert to Date objects
AESTDT = as.Date(AESTDT),
AERCD = as.Date(AERCD),
# Calculate difference in days
diffAE = ifelse(as.numeric(AERCD - AESTDT) < 0, 0, as.numeric(AERCD - AESTDT))
) %>%
mutate(
# Flag mismatches
AEmism = ifelse(diffAE > 1, 1, 0)
) %>%
select(SUBJID, AESTDT, AERCD, diffAE, AEmism, AESER) %>%
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")], by = "SUBJID") %>%
filter(!is.na(diffAE), FILTER_ITT == 1) %>%
mutate(type = "Investigator reported")
# --- Combine both sources into one AE dataframe ---
AE <- rbind(AE, AD)
remove(AD)
ft <- make_tables_8(AE, serious = 0, split = TRUE)
default_save_ft(ft, "Table 8.4.28 AE reporting delay by arm and country (KPI analysis set)")
ft
ft <- make_tables_8(AE, serious = 1)
default_save_ft(ft, "Table 8.4.29 SAE reporting delay by arm and country (KPI analysis set)")
ft
# AE reporting delay by arm (all report types)
p <- make_boxplots_8(AE, 0, split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.30 Boxplot AE reporting delay by arm (KPI analysis set).png"), plot = p)
p
# SAE reporting delay by arm (all report types)
p <- make_boxplots_8(AE, 1, split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.31 Boxplot SAE reporting delay by arm (KPI analysis set).png"), plot = p)
p
# AE reporting delay by country, Part A (all report types)
p <- make_boxplots_8(AE, 0, countries = TRUE, part = "A", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.32 Boxplot AE reporting delay by country Part A (KPI analysis set).png"), plot = p)
p
# SAE reporting delay by country, Part A (all report types)
p <- make_boxplots_8(AE, 1, countries = TRUE, part = "A", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.33 Boxplot SAE reporting delay by country Part A (KPI analysis set).png"), plot = p)
p
# AE reporting delay by country, Part B (all report types)
p <- make_boxplots_8(AE, 0, countries = TRUE, part = "B", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.34 Boxplot AE reporting delay by country Part B (KPI analysis set).png"), plot = p)
p
# SAE reporting delay by country, Part B (all report types)
p <- make_boxplots_8(AE, 1, countries = TRUE, part = "B", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.35 Boxplot SAE reporting delay by country Part B (KPI analysis set).png"), plot = p)
p
ft <- make_tables_8_2(AE, serious = 0, split_by_type = TRUE)
default_save_ft(ft, "Table 8.4.36 AE reporting mismatch by arm and country (KPI analysis set)")
ft
ft <- make_tables_8_2(AE, serious = 1, split_by_type = TRUE)
default_save_ft(ft, "Table 8.4.37 SAE reporting mismatch by arm and country (KPI analysis set)")
ft
# Load and prepare eDiary data (manual insulin entry)
ed_data <- read.csv(file.path(data_dir, "wideED.csv")) %>%
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")]) %>%
filter(FILTER_ITT == 1) %>%
mutate(QDDT = as.Date(QDDT))
# Load and prepare MEMs exposure data (electronic monitoring)
em_data <- read.csv(file.path(data_dir, "wideEM.csv")) %>%
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")]) %>%
filter(FILTER_ITT == 1) %>%
mutate(EMDRUGDT = as.Date(EMDRUGDT))
# Merge eDiary and MEMs data
treatment_data <- full_join(ed_data, em_data, by = c("SUBJID", "FORMREPEATKEY")) %>%
# Handle duplicate columns from join
mutate(across(
ends_with(".x"),
~ coalesce(., get(sub("x$", "y", cur_column()))),
.names = "{.col}"
)) %>%
# Clean column names
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
# Create unified drug administration date (prefer electronic over manual)
mutate(drug_administration_date = coalesce(EMDRUGDT, QDDT)) %>%
mutate(drug_dosage = coalesce(EMDRUGUNIT, EDDRUGUNIT)) %>%
# Select relevant columns
select(SUBJID, FORMREPEATKEY, drug_administration_date, drug_dosage, ENARM, ENPART, AFCOU) %>%
unique() %>%
# Remove rows with missing arm information
filter(!is.na(ENARM) & ENARM != "") %>%
left_join(km_data) # Add time in study data
temp <- treatment_data %>% group_by(SUBJID) %>% summarize(days_registered = max(FORMREPEATKEY)+1) %>% left_join(km_data)
# ??? Max days registered is longer than days in study?
# ??? Also there are patients with a date for a injection but no dose???
temp
# Complete missing FORMREPEATKEY values for each subject
treatment_data <- treatment_data %>%
group_by(SUBJID) %>%
# Remove dosing registration even after EOT date
filter(FORMREPEATKEY < time_in_treatment) %>% # ??? There are patients which registered more days than how long they were in the study
# Complete FORMREPEATKEY from 0 to maximum for each subject
complete(FORMREPEATKEY = 0:(max(time_in_treatment) -1) ) %>% # time_in_treatment - 1 because FORMREPEATKEY is base 0.
# Fill constant variables (ENARM, ENPART, AFCOU) across all FORMREPEATKEY values
fill(ENARM, ENPART, AFCOU, .direction = "downup") %>%
ungroup()
# Generate adherence statistics
adherence_summary <- calculate_adherence_stats(treatment_data, acceptability_threshold = 0.8)
# Create and save formatted table
ft <- flextable(adherence_summary) %>%
theme_booktabs() %>%
merge_v(j = ~Arm) %>%
valign(j = ~Arm, valign = "top") %>%
autofit() %>%
FitFlextableToPage()
default_save_ft(ft, "Table 8.4.30 Treatment adherence defined as percentage of days of documented intake per study arm and per country (KPI analysis set)")
ft
# Generate and save plots
# Overall adherence by arm
p_overall <- create_adherence_plots(treatment_data, "by_arm")
ggsave(
file.path(figures_out, "Figure 8.4.31 Boxplots of treatment adherence defined as percentage of days of documented intake per study arm (KPI analysis set).png"),
plot = p_overall,
width = 8,
height = 6
)
print(p_overall)
# Adherence by country for Part A
p_part_a <- create_adherence_plots(treatment_data, "by_country_part_a")
ggsave(
file.path(figures_out, "Figure 8.4.32 Boxplots of treatment adherence defined as percentage of days of documented intake per country, Part A (KPI analysis set).png"),
plot = p_part_a,
width = 10,
height = 6
)
print(p_part_a)
# Adherence by country for Part B
p_part_b <- create_adherence_plots(treatment_data, "by_country_part_b")
ggsave(
file.path(figures_out, "Figure 8.4.33 Boxplots of treatment adherence defined as percentage of days of documented intake per country, Part B (KPI analysis set).png"),
plot = p_part_b,
width = 10,
height = 6
)
print(p_part_b)
# Load required datasets
LB <- read.csv(file.path(data_dir, "wideLB.csv"))
GL <- read.csv(file.path(data_dir, "wideGL.csv"))
# Join with main dataset for filtering
LB <- left_join(LB, joined_data[, c("SUBJID", "FILTER_ITT", "AFCOU", "ENPART", "ENARM", "SCDDT")])
GL <- left_join(GL, joined_data[, c("SUBJID", "FILTER_ITT")])
# Filter for ITT population
LB <- LB %>% filter(FILTER_ITT == 1)
GL <- GL %>% filter(FILTER_ITT == 1)
# Define HbA1c visits of interest
hba1c_visit_names <- c("V1", "V1A", "V6", "V9")
hba1c_visits <- VD %>%
filter(EVENT %in% hba1c_visit_names) %>%
select(SUBJID, EVENT, VDDT, filled_VDDT, VDPERF, latest_expected_VDDT, earliest_expected_VDDT, SCDDT)
# Create HbA1c missing data indicators
hba1c_missing <- LB %>% filter(EVENT %in% hba1c_visit_names) %>% left_join(hba1c_visits) %>%
mutate(
hba1c_missing = case_when(
LBBLPERF == 0 | (LBBLPERF == 1 & is.na(LBHRESULT)) ~ 1,  # Missing
is.na(LBBLPERF) ~ 1,                                      # Missing
LBBLPERF == 1 ~ 0,                                        # Present
TRUE ~ NA_real_
)
) %>%
select(SUBJID, EVENT, hba1c_missing, SCDDT, LBBLDT, VDDT, filled_VDDT, VDPERF, earliest_expected_VDDT, latest_expected_VDDT, LBBLRND)
hba1c_missing <- hba1c_missing %>%
mutate(
hba1c_missing = case_when(
LBBLRND == "early termiantion" ~ 0,
LBBLRND == "sample collected on 04/Jan/2024" ~ 0,
LBBLRND == "not required " ~ 0,
TRUE ~ hba1c_missing
)
)
hba1c_missing <- hba1c_missing  %>% filter(SCDDT >= filled_VDDT)
# Summarize HbA1c missing data by subject
hba1c_missing_summary <- hba1c_missing %>%
group_by(SUBJID) %>%
summarise(
hba1c_missing_overall = case_when(
all(hba1c_missing == 1) ~ 1,    # All missing
any(hba1c_missing == 1) ~ 2,    # Partially missing
all(hba1c_missing == 0) ~ 3,    # All present
TRUE ~ NA_real_
),
.groups = "drop"
)
table(hba1c_missing_summary$hba1c_missing_overall)
# !!! changed
# Define satisfaction questionnaire visits
satisfaction_visits <- c("V2", "V6", "V9")
# Filter visit data for satisfaction visits
vd_satisfaction <- VD %>%
filter(EVENT %in% satisfaction_visits)
# Process patient satisfaction missing data
patient_satisfaction_missing <- SP %>%
select(SUBJID, FORM, SPSECA1, SPSECB1, SPSECC1) %>%
mutate(
EVENT = case_when(
FORM == "F_SPA" ~ "V2",
FORM == "F_SPB" ~ "V6",
FORM == "F_SPC" ~ "V9",
TRUE ~ NA_character_
)
) %>%
# Join with main dataset and visit performance data
left_join(joined_data %>% select(SUBJID, ENARM, AFCOU, FILTER_ITT, SCDDT)) %>%
filter(FILTER_ITT == 1) %>%
left_join(vd_satisfaction %>% select(SUBJID, VDPERF, VDDT, filled_VDDT, earliest_expected_VDDT,latest_expected_VDDT, EVENT)) %>%
mutate(VISIT_NUM = case_when(
FORM == "F_SPA" ~ 1,
FORM == "F_SPB" ~ 2,
FORM == "F_SPC" ~ 3
)) %>%
filter(SCDDT >= filled_VDDT) %>%
# Get first non-missing value per subject per visit
group_by(SUBJID, ENARM, AFCOU) %>%
summarise(
last_vist = c("V2", "V6", "V9")[max(VISIT_NUM)],
SPSECA1 = first(na.omit(SPSECA1)),
SPSECB1 = first(na.omit(SPSECB1)),
SPSECC1 = first(na.omit(SPSECC1)),
.groups = "drop"
) %>%
# Create missing indicators for each visit
mutate(
satisfaction_missing_v2 = ifelse(is.na(SPSECA1), 1, 3),
satisfaction_missing_v6 = ifelse(is.na(SPSECB1), 1, 3),
satisfaction_missing_v9 = ifelse(is.na(SPSECC1), 1, 3)
) %>%
# Summarize overall missing pattern
mutate(
satisfaction_missing_overall = case_when(
last_vist == "V2" & satisfaction_missing_v2 == 1 ~ 1,  # Only V2, All missing,
last_vist == "V6" & satisfaction_missing_v2 == 1 & satisfaction_missing_v6 == 1 ~ 1,  # Incl. V6, All missing,
last_vist == "V9" & satisfaction_missing_v2 == 1 & satisfaction_missing_v6 == 1 & satisfaction_missing_v9 == 1 ~ 1,  # Incl. V9, All missing
last_vist == "V2" & satisfaction_missing_v2 == 3 ~ 3,  # Only V2, All done,
last_vist == "V6" & satisfaction_missing_v2 == 3 & satisfaction_missing_v6 == 3 ~ 3,  # Incl. V6, All done,
last_vist == "V9" & satisfaction_missing_v2 == 3 & satisfaction_missing_v6 == 3 & satisfaction_missing_v9 == 3 ~ 3,  # Incl. V9, All done
TRUE ~ 2  # Partially missing
)
) %>%
select(SUBJID, satisfaction_missing_overall)
table(patient_satisfaction_missing$satisfaction_missing_overall)
# ??? !!! missings not eos?
# Filter visit data for SMPG visits
vd_smpg <- VD %>%
filter(EVENT %in% c("V6", "V9") & VDPERF == 1)
vd_smpg <- left_join(vd_smpg, joined_data[,c("SUBJID", "SCDDT")])
# Clean glucose data
GL$EVENT <- NULL  # Remove EVENT column as it's not needed
GL$GLDT <- as.Date(sub("T.*", "", GL$GLDT))
# Initialize SMPG missing data frame
smpg_missing <- expand.grid(
SUBJID = unique(GL$SUBJID),
VISIT = c("V6", "V9"),
fasting_smpg_missing_visit = NA_real_,
filled_VDDT = NA,
SCDDT = NA,
titrated = NA
)
# Calculate SMPG missing data for each subject and visit
for (patient in unique(GL$SUBJID)) {
gl_patient <- GL[GL$SUBJID == patient, ]
vd_patient <- vd_smpg[vd_smpg$SUBJID == patient, ]
treatment_data_patient <- treatment_data[treatment_data$SUBJID == patient, ]
for (visit in vd_patient$EVENT) {
visit_date <- as.Date(vd_patient$filled_VDDT[vd_patient$EVENT == visit])
days_before_visit <- seq(from = visit_date - 7, to = visit_date - 1, by = "day")
titration_days_before_visit <- seq(from = visit_date - 35, to = visit_date - 8, by = "day")
dosage_titration_days <- treatment_data_patient[as.Date(treatment_data_patient$drug_administration_date) %in% titration_days_before_visit,"drug_dosage"]
# Titration days all same dosage and not all NA?
titrated <- length(unique(dosage_titration_days)) == 1 & !all(is.na(dosage_titration_days))
# Determine missing status based on glucose measurements
missing_status <- case_when(
all(days_before_visit %in% gl_patient$GLDT) ~ 3,    # All days have measurements
any(days_before_visit %in% gl_patient$GLDT) ~ 2,    # Some days have measurements
all(!days_before_visit %in% gl_patient$GLDT) ~ 1,   # No days have measurements
TRUE ~ NA_real_
)
smpg_missing[smpg_missing$SUBJID == patient & smpg_missing$VISIT == visit, "fasting_smpg_missing_visit"] <- missing_status
smpg_missing[smpg_missing$SUBJID == patient & smpg_missing$VISIT == visit, "SCDDT"] <- as.Date(vd_patient$SCDDT[vd_patient$EVENT == visit])
smpg_missing[smpg_missing$SUBJID == patient & smpg_missing$VISIT == visit, "filled_VDDT"] <- as.Date(vd_patient$filled_VDDT[vd_patient$EVENT == visit])
smpg_missing[smpg_missing$SUBJID == patient & smpg_missing$VISIT == visit, "titrated"] <- ifelse(titrated, 1, 0)
}
}
smpg_missing$filled_VDDT <- as.Date(smpg_missing$filled_VDDT)
smpg_missing$SCDDT <- as.Date(smpg_missing$SCDDT)
# Remove rows with missing data
smpg_missing <- smpg_missing[!is.na(smpg_missing$fasting_smpg_missing_visit), ]
smpg_missing <- smpg_missing[smpg_missing$titrated == 1, ]
# Summarize SMPG missing data by subject
smpg_missing_summary <- smpg_missing %>%
group_by(SUBJID) %>%
summarise(
smpg_missing_overall = case_when(
all(fasting_smpg_missing_visit == 1) ~ 1,    # All missing
all(fasting_smpg_missing_visit == 3) ~ 3,    # All present
any(fasting_smpg_missing_visit == 1) | any(fasting_smpg_missing_visit != 1) ~ 2,  # Mixed
TRUE ~ NA_real_
),
.groups = "drop"
)
table(smpg_missing_summary$smpg_missing_overall)
# Join all missing data summaries
missing_data_combined <- hba1c_missing_summary %>%
left_join(patient_satisfaction_missing, by = "SUBJID") %>%
left_join(smpg_missing_summary, by = "SUBJID")
# Fill missing values with 1 (indicating missing)
missing_data_combined <- missing_data_combined %>%
mutate(across(everything(), ~ ifelse(is.na(.), 1, .)))
# Join with main dataset for analysis
missing_data_final <- missing_data_combined %>%
left_join(joined_data[, c("SUBJID", "AFCOU", "ENPART", "ENARM")], by = "SUBJID")
# Convert to long format for analysis
missing_data_long <- missing_data_final %>%
pivot_longer(
cols = c(hba1c_missing_overall, satisfaction_missing_overall, smpg_missing_overall),
names_to = "variable",
values_to = "completion_code"
) %>%
mutate(
# Assign descriptive names
variable = case_when(
variable == "hba1c_missing_overall" ~ "HbA1c",
variable == "satisfaction_missing_overall" ~ "Participant satisfaction questionnaire",
variable == "smpg_missing_overall" ~ "Fasting SMPG",
TRUE ~ variable
),
# Recode completion codes
completion_category = case_when(
completion_code == 3 ~ "All completed",
completion_code == 2 ~ "Partially completed",
completion_code == 1 ~ "Not completed",
TRUE ~ NA_character_
)
)
# Calculate summary statistics
missing_summary <- missing_data_long %>%
group_by(ENARM, variable, completion_category) %>%
summarize(n = n(), .groups = "drop") %>%
group_by(ENARM, variable) %>%
mutate(percent = round(100 * n / sum(n), 1)) %>%
ungroup()
# Create final table
missing_final_table <- missing_summary %>%
pivot_wider(
names_from = completion_category,
values_from = c(n, percent),
names_glue = "{completion_category}_{.value}"
) %>%
mutate(
# Combine count and percentage
`All completed, N (%)` = paste0(`All completed_n`, " (", `All completed_percent`, "%)"),
`Partially completed, N (%)` = paste0(`Partially completed_n`, " (", `Partially completed_percent`, "%)"),
`Not completed, N (%)` = paste0(`Not completed_n`, " (", `Not completed_percent`, "%)"),
# Handle NA values
across(everything(), ~ ifelse(grepl("NA", .), "0 (0%)", .)),
# Set variable order
variable = factor(variable, levels = c("HbA1c", "Participant satisfaction questionnaire", "Fasting SMPG"))
) %>%
arrange(variable) %>%
rename(Arm = ENARM) %>%
select(variable, Arm,
`All completed, N (%)`,
`Partially completed, N (%)`,
`Not completed, N (%)`)
# Create and save flextable
ft <- flextable(missing_final_table) %>%
theme_booktabs() %>%
merge_v(j = ~variable) %>%
valign(j = ~variable, valign = "top") %>%
autofit() %>%
FitFlextableToPage()
default_save_ft(ft, "Table 8.4.34 Proportion of missing data points in each study arm for HbA1c, for satisfaction questionnaire and for fasting glucose (KPI analysis set)")
ft
# Extract HbA1c missing reasons
hba1c_reasons <- LB %>%
filter(EVENT %in% hba1c_visits) %>%
select(SUBJID, LBBLRND, ENARM, ENPART) %>%
filter(LBBLRND != "")
# Categorize reasons for missing data
hba1c_reasons_categorized <- hba1c_reasons %>%
mutate(reason_group = case_when(
LBBLRND %in% c(
"Patient has no laboratory Equipment",
"Material for shipment not received by patient",
"patient lost the laboratory kit  a new was requested",
"Kit was not available.",
"Kit was not available. "
) ~ "Patient did not have laboratory kit",
LBBLRND %in% c(
"Visit not performed",
"visit conducted via telephone. "
) ~ "Visit-Related",
LBBLRND %in% c(
" Consensus decision by Promoter and IP ",
"not required "
) ~ "Study/Protocol Decision",
LBBLRND %in% c(
"unknown",
"Patient did not perform laboratory sampling due to ",
"sample collected on 04/Jan/2024",
"early termiantion"
) ~ "Unknown or ambiguous",
TRUE ~ "Uncategorized"
))
# Calculate summary statistics
hba1c_reasons_summary <- hba1c_reasons_categorized %>%
group_by(ENPART, ENARM, reason_group) %>%
summarise(n = n(), .groups = "drop") %>%
group_by(ENPART, ENARM) %>%
mutate(percent = round(100 * n / sum(n), 1)) %>%
ungroup()
# Format final table
hba1c_reasons_final <- hba1c_reasons_summary %>%
select(
Part = ENPART,
Arm = ENARM,
`Reason for missing` = reason_group,
N = n,
`%` = percent
)
# Create and save flextable
ft <- flextable(hba1c_reasons_final) %>%
theme_booktabs() %>%
merge_v(j = ~Part) %>%
valign(j = ~Part, valign = "top") %>%
merge_v(j = ~Arm) %>%
valign(j = ~Arm, valign = "top") %>%
autofit()
default_save_ft(ft, "Table 8.4.35 Reason for missing data points for HbA1c in each study arm (KPI analysis set)")
ft
# Identify subjects with incomplete SMPG data
subjects_incomplete_smpg <- smpg_missing_summary$SUBJID[smpg_missing_summary$smpg_missing_overall != 3]
# Extract device satisfaction data for these subjects
smpg_device_satisfaction <- SP %>%
filter(SUBJID %in% subjects_incomplete_smpg) %>%
select(SUBJID, SPSECB21, SPSECC17, SPSECB30, SPSECC25)
# Get maximum value per subject (handling multiple records)
smpg_device_satisfaction <- smpg_device_satisfaction %>%
group_by(SUBJID) %>%
summarise(across(c(SPSECB21, SPSECC17, SPSECB30, SPSECC25), ~ max(.x, na.rm = TRUE)), .groups = "drop")
# Clean and recode satisfaction variables
smpg_device_satisfaction <- smpg_device_satisfaction %>%
mutate(across(everything(), ~ ifelse(. == -Inf, 5, .))) %>%
mutate(
SPSECB21 = factor(SPSECB21, levels = 0:5,
labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing")),
SPSECC17 = factor(SPSECC17, levels = 0:5,
labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing")),
SPSECB30 = factor(SPSECB30, levels = 0:5,
labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing")),
SPSECC25 = factor(SPSECC25, levels = 0:5,
labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing"))
)
# Set variable labels
label(smpg_device_satisfaction$SPSECB21) <- "Visit V6"
label(smpg_device_satisfaction$SPSECC17) <- "Visit V9 (EOT)"
label(smpg_device_satisfaction$SPSECB30) <- "Visit V6"
label(smpg_device_satisfaction$SPSECC25) <- "Visit V9 (EOT)"
# Custom render function for categorical variables
render_categorical_custom <- function(x) {
counts <- table(x, useNA = "ifany")
perc <- prop.table(counts) * 100
labels <- names(counts)
formatted <- ifelse(
labels == "Missing",
sprintf("%d", counts),
sprintf("%d (%.1f%%)", counts, perc)
)
structure(formatted, names = labels)
}
# Create satisfaction tables
# Table 1: Satisfaction with device
satisfaction_formula_1 <- as.formula("~ SPSECB21 + SPSECC17")
satisfaction_table_1 <- table1(
satisfaction_formula_1,
data = smpg_device_satisfaction,
render.categorical = render_categorical_custom,
caption = "CRF question: I (the patient) am satisfied with the bluetooth-paired glucometer for collection of fasting glucose measurements."
)
ft_1 <- t1flex(satisfaction_table_1) %>% theme_booktabs() %>% autofit()
default_save_ft(ft_1, "Table 8.4.36 Patient satisfaction with the bluetooth-paired glucometer for collection of fasting glucose measurements (KPI analysis set)")
# Table 2: Ease of use
satisfaction_formula_2 <- as.formula("~ SPSECB30 + SPSECC25")
satisfaction_table_2 <- table1(
satisfaction_formula_2,
data = smpg_device_satisfaction,
render.categorical = render_categorical_custom,
caption = "CRF question: I (the patient) find the bluetooth-paired glucometer for collection of fasting glucose measurements easy to use."
)
ft_2 <- t1flex(satisfaction_table_2) %>% theme_booktabs() %>% autofit()
default_save_ft(ft_2, "Table 8.4.37 Patient satisfaction with the bluetooth-paired glucometer for collection of fasting glucose measurements (KPI analysis set)")
# Load and clean query data
query_data <- load_and_clean_query_data(query_file = "data/RADIAL_query_V0.csv")
# Generate query rate tables
query_tables <- generate_query_rate_tables(query_data)
source("~/Documents/AML_PhD/leukem_ai/R/analyse_outer_cv.r")
View(outer_cv_results)
warnings()
outer_cv_results[["performance_comparison"]][["loso"]]
